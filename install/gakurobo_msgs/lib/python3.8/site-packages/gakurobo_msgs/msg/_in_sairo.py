# generated from rosidl_generator_py/resource/_idl.py.em
# with input from gakurobo_msgs:msg/InSairo.idl
# generated code does not contain a copyright notice


# Import statements for member types

# Member 'sairo1'
# Member 'sairo2'
# Member 'sairo3'
# Member 'sairo4'
# Member 'sairo5'
import numpy  # noqa: E402, I100

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_InSairo(type):
    """Metaclass of message 'InSairo'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('gakurobo_msgs')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'gakurobo_msgs.msg.InSairo')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__in_sairo
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__in_sairo
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__in_sairo
            cls._TYPE_SUPPORT = module.type_support_msg__msg__in_sairo
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__in_sairo

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class InSairo(metaclass=Metaclass_InSairo):
    """Message class 'InSairo'."""

    __slots__ = [
        '_sairo1',
        '_sairo2',
        '_sairo3',
        '_sairo4',
        '_sairo5',
    ]

    _fields_and_field_types = {
        'sairo1': 'int8[3]',
        'sairo2': 'int8[3]',
        'sairo3': 'int8[3]',
        'sairo4': 'int8[3]',
        'sairo5': 'int8[3]',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.Array(rosidl_parser.definition.BasicType('int8'), 3),  # noqa: E501
        rosidl_parser.definition.Array(rosidl_parser.definition.BasicType('int8'), 3),  # noqa: E501
        rosidl_parser.definition.Array(rosidl_parser.definition.BasicType('int8'), 3),  # noqa: E501
        rosidl_parser.definition.Array(rosidl_parser.definition.BasicType('int8'), 3),  # noqa: E501
        rosidl_parser.definition.Array(rosidl_parser.definition.BasicType('int8'), 3),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        if 'sairo1' not in kwargs:
            self.sairo1 = numpy.zeros(3, dtype=numpy.int8)
        else:
            self.sairo1 = numpy.array(kwargs.get('sairo1'), dtype=numpy.int8)
            assert self.sairo1.shape == (3, )
        if 'sairo2' not in kwargs:
            self.sairo2 = numpy.zeros(3, dtype=numpy.int8)
        else:
            self.sairo2 = numpy.array(kwargs.get('sairo2'), dtype=numpy.int8)
            assert self.sairo2.shape == (3, )
        if 'sairo3' not in kwargs:
            self.sairo3 = numpy.zeros(3, dtype=numpy.int8)
        else:
            self.sairo3 = numpy.array(kwargs.get('sairo3'), dtype=numpy.int8)
            assert self.sairo3.shape == (3, )
        if 'sairo4' not in kwargs:
            self.sairo4 = numpy.zeros(3, dtype=numpy.int8)
        else:
            self.sairo4 = numpy.array(kwargs.get('sairo4'), dtype=numpy.int8)
            assert self.sairo4.shape == (3, )
        if 'sairo5' not in kwargs:
            self.sairo5 = numpy.zeros(3, dtype=numpy.int8)
        else:
            self.sairo5 = numpy.array(kwargs.get('sairo5'), dtype=numpy.int8)
            assert self.sairo5.shape == (3, )

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if all(self.sairo1 != other.sairo1):
            return False
        if all(self.sairo2 != other.sairo2):
            return False
        if all(self.sairo3 != other.sairo3):
            return False
        if all(self.sairo4 != other.sairo4):
            return False
        if all(self.sairo5 != other.sairo5):
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def sairo1(self):
        """Message field 'sairo1'."""
        return self._sairo1

    @sairo1.setter
    def sairo1(self, value):
        if isinstance(value, numpy.ndarray):
            assert value.dtype == numpy.int8, \
                "The 'sairo1' numpy.ndarray() must have the dtype of 'numpy.int8'"
            assert value.size == 3, \
                "The 'sairo1' numpy.ndarray() must have a size of 3"
            self._sairo1 = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 len(value) == 3 and
                 all(isinstance(v, int) for v in value) and
                 all(val >= -128 and val < 128 for val in value)), \
                "The 'sairo1' field must be a set or sequence with length 3 and each value of type 'int' and each integer in [-128, 127]"
        self._sairo1 = numpy.array(value, dtype=numpy.int8)

    @property
    def sairo2(self):
        """Message field 'sairo2'."""
        return self._sairo2

    @sairo2.setter
    def sairo2(self, value):
        if isinstance(value, numpy.ndarray):
            assert value.dtype == numpy.int8, \
                "The 'sairo2' numpy.ndarray() must have the dtype of 'numpy.int8'"
            assert value.size == 3, \
                "The 'sairo2' numpy.ndarray() must have a size of 3"
            self._sairo2 = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 len(value) == 3 and
                 all(isinstance(v, int) for v in value) and
                 all(val >= -128 and val < 128 for val in value)), \
                "The 'sairo2' field must be a set or sequence with length 3 and each value of type 'int' and each integer in [-128, 127]"
        self._sairo2 = numpy.array(value, dtype=numpy.int8)

    @property
    def sairo3(self):
        """Message field 'sairo3'."""
        return self._sairo3

    @sairo3.setter
    def sairo3(self, value):
        if isinstance(value, numpy.ndarray):
            assert value.dtype == numpy.int8, \
                "The 'sairo3' numpy.ndarray() must have the dtype of 'numpy.int8'"
            assert value.size == 3, \
                "The 'sairo3' numpy.ndarray() must have a size of 3"
            self._sairo3 = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 len(value) == 3 and
                 all(isinstance(v, int) for v in value) and
                 all(val >= -128 and val < 128 for val in value)), \
                "The 'sairo3' field must be a set or sequence with length 3 and each value of type 'int' and each integer in [-128, 127]"
        self._sairo3 = numpy.array(value, dtype=numpy.int8)

    @property
    def sairo4(self):
        """Message field 'sairo4'."""
        return self._sairo4

    @sairo4.setter
    def sairo4(self, value):
        if isinstance(value, numpy.ndarray):
            assert value.dtype == numpy.int8, \
                "The 'sairo4' numpy.ndarray() must have the dtype of 'numpy.int8'"
            assert value.size == 3, \
                "The 'sairo4' numpy.ndarray() must have a size of 3"
            self._sairo4 = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 len(value) == 3 and
                 all(isinstance(v, int) for v in value) and
                 all(val >= -128 and val < 128 for val in value)), \
                "The 'sairo4' field must be a set or sequence with length 3 and each value of type 'int' and each integer in [-128, 127]"
        self._sairo4 = numpy.array(value, dtype=numpy.int8)

    @property
    def sairo5(self):
        """Message field 'sairo5'."""
        return self._sairo5

    @sairo5.setter
    def sairo5(self, value):
        if isinstance(value, numpy.ndarray):
            assert value.dtype == numpy.int8, \
                "The 'sairo5' numpy.ndarray() must have the dtype of 'numpy.int8'"
            assert value.size == 3, \
                "The 'sairo5' numpy.ndarray() must have a size of 3"
            self._sairo5 = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 len(value) == 3 and
                 all(isinstance(v, int) for v in value) and
                 all(val >= -128 and val < 128 for val in value)), \
                "The 'sairo5' field must be a set or sequence with length 3 and each value of type 'int' and each integer in [-128, 127]"
        self._sairo5 = numpy.array(value, dtype=numpy.int8)
